@startuml
' Library
title Typed M1 Library Example

skinparam object {
    BackgroundColor<<TypedNode>> LightGreen
    BackgroundColor<<TypedReference>> LightSkyBlue
}
skinparam map {
    BackgroundColor<<TypedProperty>> LightPink
    BackgroundColor<<TypedChild>> LightBlue
}

object "<T = Library> Bob's Library" as library<<TypedNode>> {
    concept = → runtime::Library
}

map " " as libraryProperties<<TypedProperty>> {
    → runtime::LibraryName => <T = String> "Bob's Library"
}
library *-- libraryProperties: properties

' Explorer book

object "<T = Book> Explorer Book" as explorerBook<<TypedNode>> {
    concept = → runtime::Book
}

map " " as explorerBookProperties<<TypedProperty>> {
    → runtime::BookTitle => <T = String> "Explorer Book"
    → runtime::BookPages => <T = Integer> 123
}
explorerBook *-- explorerBookProperties: properties

map " " as libraryChildren<<TypedChild>> {
    LibraryBooks => <T = Book*> → runtime::LibraryBooks
}
library *-- libraryChildren: children
libraryChildren::LibraryBooks -> explorerBook


object "<T = Writer>" as explorerBookAuthor<<TypedReference>> {
    reference = → runtime::BookAuthor
}
explorerBook *-- explorerBookAuthor: references

' Jack London
object "<T = GuideBookWriter> Jack London" as jackLondon<<TypedNode>> {
    concept = → runtime::GuideBookWriter
}

map " " as jackLondonProperties<<TypedProperty>> {
    → runtime::WriterName => <T = String> "Jack London"
    → runtime::GuideBookWriterCountries => <T = String> "Alaska"
}
jackLondon *-- jackLondonProperties: properties

explorerBookAuthor --> jackLondon: target
@enduml
