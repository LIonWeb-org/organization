@startuml
title Typed M2 Library Example

hide empty members

!include ../plantuml-shared/typed-skinparam.puml
!include ../plantuml-shared/map-legend.puml

package "M3 runtime" {
    object "Metamodel" as metamodel

    object "qualifiedName" as qualifiedName
    metamodel *-- qualifiedName

    object "elements" as elements
    metamodel *-- elements

    object "Concept" as concept

    object "simpleName" as simpleName
    concept *-- simpleName

    object "abstract" as abstract
    concept *-- abstract

    object "features" as features
    concept *-- features

    object "extends" as extends
    concept *-- extends

    object "PrimitiveType" as primitiveType
    primitiveType *-- simpleName

    object "Property" as property
    property *-- simpleName

    object "optional" as optional
    property *-- optional

    object "propertyType" as propertyType
    property *-- propertyType

    object "Reference" as reference
    reference *-- simpleName
    reference *-- optional

    object "multiple" as multiple
    reference *-- multiple

    object "linkType" as linkType
    reference *-- linkType

    object "Containment" as containment
    containment *-- simpleName
    containment *-- optional
    containment *-- multiple
    containment *-- linkType
}

package "M3 generated" {
    object "Metamodel" as genMetamodel

    object "MetamodelElement" as genMetamodelElement

    object "Concept" as genConcept

    object "PrimitiveType" as genPrimitiveType

    object "Feature" as genFeature

    object "Property" as genProperty

    object "Reference" as genReference

    object "Containment" as genContainment
}

' library (metamodel)

object "<T = generated::Metamodel> library" as library<<TypedNode>> {
    concept = → m3runtime::Metamodel
}
'metamodel <- library #lightgray: concept


map " " as libraryQualifiedName<<TypedProperty>> {
    → m3runtime::qualifiedName => <T = String> "library"
}
library *-- libraryQualifiedName: properties
'qualifiedName <- libraryQualifiedName #lightgray: property

map " " as libraryChildren<<TypedChild>> {
    elements => <T = generated::MetamodelElement*> → m3runtime::elements
}
library *-- libraryChildren: children
'elements <- libraryLibString #lightgray: containment

' LibString

object "<T = PrimitiveType> LibString" as LibString<<TypedNode>> {
    concept = → m3runtime::PrimitiveType
}
'primitiveType <- LibString #lightgray: concept

libraryChildren::elements --> LibString: target

map " " as LibStringName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "LibString"
}
LibString *-- LibStringName: properties
'simpleName <- LibStringName #lightgray: property

' LibBoolean

object "<T = generated::PrimitiveType> LibBoolean" as LibBoolean<<TypedNode>> {
    concept = → m3runtime::PrimitiveType
}
'primitiveType <- LibBoolean #lightgray: concept

libraryChildren::elements --> LibBoolean: target

map " " as LibBooleanName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "LibBoolean"
}
LibBoolean *-- LibBooleanName: properties
'simpleName <- LibBooleanName #lightgray: property

' LibInteger

object "<T = generated::PrimitiveType> LibInteger" as LibInteger<<TypedNode>> {
    concept = → m3runtime::PrimitiveType
}
'primitiveType <- LibInteger #lightgray: concept

libraryChildren::elements --> LibInteger: target

map " " as LibIntegerName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "LibInteger"
}
LibInteger *-- LibIntegerName: properties
'simpleName <- LibIntegerName #lightgray: property

' Book

object "<T = generated::Concept> Book" as Book<<TypedNode>> {
    concept = → m3runtime::Concept
}
'concept <- Book #lightgray: concept

libraryChildren::elements --> Book: target

map " " as bookName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "Book"
    → m3runtime::abstract => <T = Boolean> false
}
Book *-- bookName: properties

' Book.title

object "<T = Property> title" as title<<TypedNode>> {
    concept = → m3runtime::Property
}
'property <- title #lightgray: concept

map " " as bookChildren<<TypedChild>> {
     features => <T = generated::Feature*> → m3runtime::features
}
Book *-- bookChildren: children
bookChildren::features -> title: target

map " " as titleName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "title"
    → m3runtime::optional => <T = Boolean> false
}
title *-- titleName: properties
'simpleName <- titleName #lightgray: property

object "<T = String>" as titleType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
title *-- titleType: references
'propertyType <- titleType #lightgray: reference
titleType -> LibString: target

' Book.pages

object "<T = generated::Property> pages" as pages<<TypedNode>> {
    concept = → m3runtime::Property
}
'property <- pages #lightgray: concept

bookChildren::features --> pages: target

map " " as pagesName<<TypedProperty>> {
    → m3runtime::SimpleName => <T = String> "pages"
    → m3runtime::optional => <T = Boolean> false
}
pages *-- pagesName: properties
'simpleName <- pagesName #lightgray: property

object "<T = String>" as pagesType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
pages *-- pagesType: references
'propertyType <- pagesType #lightgray: reference
pagesType -> LibInteger: target

' Book.author

object "<T = generated::Reference> author" as author<<TypedNode>> {
    concept = → m3runtime::Reference
}
'reference <- author #lightgray: concept

bookChildren::features --> author: target

map " " as authorName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "author"
    → m3runtime::optional => <T = Boolean> false
    → m3runtime::multiple => <T = Boolean> false
}
author *-- authorName: properties
'simpleName <- authorName #lightgray: property


object "<T = generated::Concept>" as authorType<<TypedReference>> {
    reference = → m3runtime::linkType
}
author *-- authorType: references
'linkType <- authorType #lightgray: reference


' Library (node)

object "<T = generated::Concept> Library" as Library<<TypedNode>> {
    concept = → m3runtime::Concept
}
'concept <- Library #lightgray: concept

libraryChildren::elements --> Library: target

map " " as libraryName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "Library"
    → m3runtime::abstract => <T = Boolean> false

}
Library *-- libraryName: properties
'simpleName <- libraryName #lightgray: property

' Library.name

object "<T = generated::Property> name" as libraryNameNode<<TypedNode>> {
    concept = → m3runtime::Property
}
'property <- libraryNameNode #lightgray: concept

map " " as LibraryNodeChildren<<TypedChild>> {
     features => <T = generated::Feature*> → m3runtime::features
}
Library *-- LibraryNodeChildren: children
LibraryNodeChildren::features --> libraryNameNode: target

map " " as libraryNameName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "name"
    → m3runtime::optional => <T = Boolean> false
}
libraryNameNode *-- libraryNameName: properties
'simpleName <- libraryNameName #lightgray: property

object "<T = String>" as libraryNameNodeType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
libraryNameNode *-- libraryNameNodeType: references
'propertyType <- libraryNameNodeType #lightgray: reference
libraryNameNodeType -> LibString: target

' Library.books

object "<T = generated::Containment> books" as books<<TypedNode>> {
    concept = → m3runtime::Containment
}
'containment <- books #lightgray: concept

LibraryNodeChildren::features --> books: target


map " " as booksName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "books"
    → m3runtime::optional => <T = Boolean> false
    → m3runtime::multiple => <T = Boolean> true
}
books *-- booksName: properties
'simpleName <- booksName #lightgray: property

object "<T = generated::Concept>" as booksType<<TypedReference>> {
    reference = → m3runtime::linkType
}
books *-- booksType: references
'linkType <- booksType #lightgray: reference
booksType -> Book: target

' Writer

object "<T = generated::Concept> Writer" as Writer<<TypedNode>> {
    concept = → m3runtime::Concept
}
'concept <- Writer #lightgray: concept


libraryChildren::elements --> Writer: target
authorType -> Writer: target

map " " as Writer_Name<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "Writer"
    → m3runtime::abstract => <T = Boolean> false
}
Writer *-- Writer_Name: properties
'simpleName <- Writer_Name #lightgray: property

' Writer.name

object "<T = generated::Property> name" as writerName<<TypedNode>> {
    concept = → m3runtime::Property
}
'property <- writerName #lightgray: concept

map " " as WriterChildren<<TypedChild>> {
     features => <T = generated::Feature*> → m3runtime::features
}
Writer *-- WriterChildren: children
WriterChildren::features --> writerName: target

map " " as writerNameName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "name"
    → m3runtime::optional => <T = Boolean> false
}
writerName *-- writerNameName: properties
'simpleName <- writerNameName #lightgray: property

object "<T = String>" as writerNameType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
writerName *-- writerNameType: references
'propertyType <- writerNameType #lightgray: reference
writerNameType -> LibString: target

' GuideBookWriter

object "<T = generated::Concept> GuideBookWriter" as GuideBookWriter<<TypedNode>> {
    concept = → m3runtime::Concept
}
'concept <- GuideBookWriter #lightgray: concept

libraryChildren::elements --> GuideBookWriter: target

map " " as GuideBookWriterName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "GuideBookWriter"
    → m3runtime::abstract => <T = Boolean> false
}
GuideBookWriter *-- GuideBookWriterName: properties
'simpleName <- GuideBookWriterName #lightgray: property

object "<T = generated::Concept>" as GuideBookWriterExtends<<TypedReference>> {
    reference = → m3runtime::extends
}
GuideBookWriter *-- GuideBookWriterExtends: references
'extends <- GuideBookWriterExtends #lightgray: reference
GuideBookWriterExtends -> Writer: target

' GuideBookWriter.countries

object "<T = generated::Property> countries" as countries<<TypedNode>> {
    concept = → m3runtime::Property
}
'simpleName <- countries #lightgray: property

map " " as GuideBookWriterChildren<<TypedChild>> {
     features => <T + generated::Feature*> → m3runtime::features
}
GuideBookWriter *-- GuideBookWriterChildren: children
GuideBookWriterChildren::features -> countries: target

map " " as countriesName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "countries"
    → m3runtime::optional => <T = Boolean> false
}
countries *-- countriesName: properties
'simpleName <- countriesName #lightgray: property

object "<T = String>" as countriesType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
countries *-- countriesType: references
'propertyType <- countriesType #lightgray: reference
countriesType -> LibString: target

' SpecialistBookWriter

object "<T = generated::Concept> SpecialistBookWriter" as SpecialistBookWriter<<TypedNode>> {
    concept = → m3runtime::Concept
}
'concept <- SpecialistBookWriter #lightgray: concept

libraryChildren::elements --> SpecialistBookWriter: target

map " " as SpecialistBookWriterName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "SpecialistBookWriter"
    → m3runtime::abstract => <T = Boolean> false
}
SpecialistBookWriter *-- SpecialistBookWriterName: properties
'simpleName <- SpecialistBookWriterName #lightgray: property

object "<T = generated::Concept>" as SpecialistBookWriterExtends<<TypedReference>> {
    reference = → m3runtime::extends
}
SpecialistBookWriter *-- SpecialistBookWriterExtends: references
'extends <- SpecialistBookWriterExtends #lightgray: reference
SpecialistBookWriterExtends -> Writer: target

' SpecialistBookWriter.subject

object "<T = generated::Property> subject" as subject<<TypedNode>> {
    concept = → m3runtime::Property
}
'simpleName <- subject #lightgray: property

map " " as SpecialistBookWriterChildren<<TypedChild>> {
     features => <T = generated::Feature*> → m3runtime::features
}
SpecialistBookWriter *-- SpecialistBookWriterChildren: children
SpecialistBookWriterChildren::features --> subject: target

map " " as subjectName<<TypedProperty>> {
    → m3runtime::simpleName => <T = String> "subject"
    → m3runtime::optional => <T = Boolean> false
}
subject *-- subjectName: properties
'simpleName <- subjectName #lightgray: property

object "<T = String>" as subjectType<<TypedReference>> {
    reference = → m3runtime::propertyType
}
subject *-- subjectType: references
'propertyType <- subjectType #lightgray: reference
subjectType -> LibString: target

@enduml
