@startuml
package meta {
    object "Metamodel" as metamodel

    object "qualifiedName" as qualifiedName
    metamodel *-- qualifiedName

    object "elements" as elements
    metamodel *-- elements

    object "Concept" as concept

    object "simpleName" as simpleName
    concept *-- simpleName

    object "abstract" as abstract
    concept *-- abstract

    object "features" as features
    concept *-- features

    object "extends" as extends
    concept *-- extends

    object "PrimitiveType" as primitiveType
    primitiveType *-- simpleName

    object "Property" as property
    property *-- simpleName

    object "optional" as optional
    property *-- optional

    object "propertyType" as propertyType
    property *-- propertyType

    object "Reference" as reference
    reference *-- simpleName
    reference *-- optional

    object "multiple" as multiple
    reference *-- multiple

    object "linkType" as linkType
    reference *-- linkType

    object "Containment" as containment
    containment *-- simpleName
    containment *-- optional
    containment *-- multiple
    containment *-- linkType
}

' library (metamodel)

object "<<Node>> library" as library {
    id = "idLibMm"
    concept = → Metamodel
}
'metamodel <- library #lightgray: concept


object "<<PropertyValue>>" as libraryQualifiedName {
    value = "library"
    property = → qualifiedName
}
library *-- libraryQualifiedName: properties
'qualifiedName <- libraryQualifiedName #lightgray: property

object "<<ChildTarget>>" as libraryString {
    containment = → elements
}
library *-- libraryString: children
'elements <- libraryString #lightgray: containment

object "<<ChildTarget>>" as libraryBoolean {
    containment = → elements
}
library *-- libraryBoolean: children
'elements <- libraryBoolean #lightgray: containment

object "<<ChildTarget>>" as libraryInteger {
    containment = → elements
}
library *-- libraryInteger: children
'elements <- libraryInteger #lightgray: containment

object "<<ChildTarget>>" as libraryBook {
    containment = → elements
}
library *-- libraryBook: children
'elements <- libraryBook #lightgray: containment

object "<<ChildTarget>>" as libraryLibrary {
    containment = → elements
}
library *-- libraryLibrary: children
'elements <- libraryLibrary #lightgray: containment

object "<<ChildTarget>>" as libraryWriter {
    containment = → elements
}
library *-- libraryWriter: children
'elements <- libraryWriter #lightgray: containment

object "<<ChildTarget>>" as libraryGuideBookWriter {
    containment = → elements
}
library *-- libraryGuideBookWriter: children
'elements <- libraryGuideBookWriter #lightgray: containment

object "<<ChildTarget>>" as librarySpecialistBookWriter {
    containment = → elements
}
library *-- librarySpecialistBookWriter: children
'elements <- librarySpecialistBookWriter #lightgray: containment


' String

object "<<Node>> String" as String {
    id = "idString"
    concept = → PrimitiveType
}
'primitiveType <- String #lightgray: concept

libraryString --> String: target

object "<<PropertyValue>>" as StringName {
    value = "String"
    property = → simpleName
}
String *-- StringName: properties
'simpleName <- StringName #lightgray: property

' Boolean

object "<<Node>> Boolean" as Boolean {
    id = "idBoolean"
    concept = → PrimitiveType
}
'primitiveType <- Boolean #lightgray: concept

libraryBoolean --> Boolean: target

object "<<PropertyValue>>" as BooleanName {
    value = "Boolean"
    property = → simpleName
}
Boolean *-- BooleanName: properties
'simpleName <- BooleanName #lightgray: property

' Integer

object "<<Node>> Integer" as Integer {
    id = "idInteger"
    concept = → PrimitiveType
}
'primitiveType <- Integer #lightgray: concept

libraryInteger --> Integer: target

object "<<PropertyValue>>" as IntegerName {
    value = "Integer"
    property = → simpleName
}
Integer *-- IntegerName: properties
'simpleName <- IntegerName #lightgray: property

' Book

object "<<Node>> Book" as Book {
    id = "idBook"
    concept = → Concept
}
'concept <- Book #lightgray: concept

libraryBook --> Book: target

object "<<PropertyValue>>" as bookName {
    value = "Book"
    property = → simpleName
}
Book *-- bookName: properties
'simpleName <- bookName #lightgray: property

object "<<PropertyValue>>" as bookAbstract {
    value = "false"
    property = → abstract
}
Book *-- bookAbstract: properties
'abstract <- bookAbstract #lightgray: property

' Book.title

object "<<Node>> title" as title {
    id = "idTitle"
    concept = → Property
}
'property <- title #lightgray: concept

object "<<ChildTarget>>" as bookTitle {
    containment = → features
}
Book *-- bookTitle: children
'features <- bookTitle #lightgray: containment
bookTitle --> title: target

object "<<PropertyValue>>" as titleName {
    value = "title"
    property = → simpleName
}
title *-- titleName: properties
'simpleName <- titleName #lightgray: property

object "<<PropertyValue>>" as titleOptional {
    value = "false"
    property = → optional
}
title *-- titleOptional: properties
'optional <- titleOptional #lightgray: property

object "<<ReferenceTarget>>" as titleType {
    resolveInfo = "String"
    reference = → propertyType
}
title *-- titleType: references
'propertyType <- titleType #lightgray: reference
titleType -> String: target

' Book.pages

object "<<Node>> pages" as pages {
    id = "idPages"
    concept = → Property
}
'property <- pages #lightgray: concept

object "<<ChildTarget>>" as bookPages {
    containment = → features
}
Book *-- bookPages: children
'features <- bookPages #lightgray: containment
bookPages --> pages: target

object "<<PropertyValue>>" as pagesName {
    value = "pages"
    property = → SimpleName
}
pages *-- pagesName: properties
'simpleName <- pagesName #lightgray: property

object "<<PropertyValue>>" as pagesOptional {
    value = "false"
    property = → optional
}
pages *-- pagesOptional: properties
'optional <- pagesOptional #lightgray: property

object "<<ReferenceTarget>>" as pagesType {
    resolveInfo = "Integer"
    reference = → propertyType
}
pages *-- pagesType: references
'propertyType <- pagesType #lightgray: reference
pagesType -> Integer: target

' Book.author

object "<<Node>> author" as author {
    id = "idAuthor"
    concept = → Reference
}
'reference <- author #lightgray: concept

object "<<ChildTarget>>" as bookAuthor {
    containment = → features
}
Book *-- bookAuthor: children
'features <- bookAuthor #lightgray: containment
bookAuthor --> author: target

object "<<PropertyValue>>" as authorName {
    value = "author"
    property = → simpleName
}
author *-- authorName: properties
'simpleName <- authorName #lightgray: property

object "<<PropertyValue>>" as authorOptional {
    value = "false"
    property = → optional
}
author *-- authorOptional: properties
'optional <- authorOptional #lightgray: property

object "<<PropertyValue>>" as authorMultiple {
    value = "false"
    property = → multiple
}
author *-- authorMultiple: properties
'multiple <- authorMultiple #lightgray: property

object "<<ReferenceTarget>>" as authorType {
    resolveInfo = "Writer"
    reference = → linkType
}
author *-- authorType: references
'linkType <- authorType #lightgray: reference
authorType -> Writer: target


' Library (node)

object "<<Node>> Library" as Library {
    id = "idLibrary"
    concept = → Concept
}
'concept <- Library #lightgray: concept

libraryLibrary --> Library: target

object "<<PropertyValue>>" as libraryName {
    value = "Library"
    property = → simpleName
}
Library *-- libraryName: properties
'simpleName <- libraryName #lightgray: property

object "<<PropertyValue>>" as libraryAbstract {
    value = "false"
    property = → abstract
}
Library *-- libraryAbstract: properties
'abstract <- libraryAbstract #lightgray: property

' Library.name

object "<<Node>> name" as libraryNameNode {
    id = "idLibraryName"
    concept = → Property
}
'property <- libraryNameNode #lightgray: concept

object "<<ChildTarget>>" as LibraryLibraryNameNode {
    containment = → features
}
Library *-- LibraryLibraryNameNode: children
'features <- LibraryLibraryNameNode #lightgray: containment
LibraryLibraryNameNode --> libraryNameNode: target

object "<<PropertyValue>>" as libraryNameName {
    value = "name"
    property = → simpleName
}
libraryNameNode *-- libraryNameName: properties
'simpleName <- libraryNameName #lightgray: property

object "<<PropertyValue>>" as libraryNameOptional {
    value = "false"
    property = → optional
}
libraryNameNode *-- libraryNameOptional: properties
'optional <- libraryNameOptional #lightgray: property

object "<<ReferenceTarget>>" as libraryNameNodeType {
    resolveInfo = "String"
    reference = → propertyType
}
libraryNameNode *-- libraryNameNodeType: references
'propertyType <- libraryNameNodeType #lightgray: reference
libraryNameNodeType -> String: target

' Library.books

object "<<Node>> books" as books {
    id = "idLibraryBooks"
    concept = → Containment
}
'containment <- books #lightgray: concept

object "<<ChildTarget>>" as LibraryBooks {
    containment = → features
}
Library *-- LibraryBooks: children
'features <- LibraryBooks #lightgray: containment
LibraryBooks --> books: target


object "<<PropertyValue>>" as booksName {
    value = "books"
    property = → simpleName
}
books *-- booksName: properties
'simpleName <- booksName #lightgray: property

object "<<PropertyValue>>" as booksOptional {
    value = "false"
    property = → optional
}
books *-- booksOptional: properties
'optional <- booksOptional #lightgray: property

object "<<PropertyValue>>" as booksMultiple {
    value = "true"
    property = → multiple
}
books *-- booksMultiple: properties
'multiple <- booksMultiple #lightgray: property

object "<<ReferenceTarget>>" as booksType {
    resolveInfo = "Book"
    reference = → linkType
}
books *-- booksType: references
'linkType <- booksType #lightgray: reference
booksType -> Book: target

' Writer

object "<<Node>> Writer" as Writer {
    id = "idWriter"
    concept = → Concept
}
'concept <- Writer #lightgray: concept

libraryWriter --> Writer: target

object "<<PropertyValue>>" as Writer_Name {
    value = "Writer"
    property = → simpleName
}
Writer *-- Writer_Name: properties
'simpleName <- Writer_Name #lightgray: property

object "<<PropertyValue>>" as WriterAbstract {
    value = "false"
    property = → abstract
}
Writer *-- WriterAbstract: properties
'abstract <- WriterAbstract #lightgray: property

' Writer.name

object "<<Node>> name" as writerName {
    id = "idWriterName"
    concept = → Property
}
'property <- writerName #lightgray: concept

object "<<ChildTarget>>" as WriterWriterName {
    containment = → features
}
Writer *-- WriterWriterName: children
'features <- WriterWriterName #lightgray: containment
WriterWriterName --> writerName: target

object "<<PropertyValue>>" as writerNameName {
    value = "name"
    property = → simpleName
}
writerName *-- writerNameName: properties
'simpleName <- writerNameName #lightgray: property

object "<<PropertyValue>>" as writerNameOptional {
    value = "false"
    property = → optional
}
writerName *-- writerNameOptional: properties
'optional <- writerNameOptional #lightgray: property

object "<<ReferenceTarget>>" as writerNameType {
    resolveInfo = "String"
    reference = → propertyType
}
writerName *-- writerNameType: references
'propertyType <- writerNameType #lightgray: reference
writerNameType -> String: target

' GuideBookWriter

object "<<Node>> GuideBookWriter" as GuideBookWriter {
    id = "idGuideBookWriter"
    concept = → Concept
}
'concept <- GuideBookWriter #lightgray: concept

libraryGuideBookWriter --> GuideBookWriter: target

object "<<PropertyValue>>" as GuideBookWriterName {
    value = "GuideBookWriter"
    property = → simpleName
}
GuideBookWriter *-- GuideBookWriterName: properties
'simpleName <- GuideBookWriterName #lightgray: property

object "<<PropertyValue>>" as GuideBookWriterAbstract {
    value = "false"
    property = → abstract
}
GuideBookWriter *-- GuideBookWriterAbstract: properties
'abstract <- GuideBookWriterAbstract #lightgray: property

object "<<ReferenceTarget>>" as GuideBookWriterExtends {
    resolveInfo = "Writer"
    reference = → extends
}
GuideBookWriter *-- GuideBookWriterExtends: references
'extends <- GuideBookWriterExtends #lightgray: reference
GuideBookWriterExtends -> Writer: target

' GuideBookWriter.countries

object "<<Node>> countries" as countries {
    id = "idGuideBookWriterCountries"
    concept = → Property
}
'simpleName <- countries #lightgray: property

object "<<ChildTarget>>" as GuideBookWriterCountries {
    containment = → features
}
GuideBookWriter *-- GuideBookWriterCountries: children
'features <- GuideBookWriterCountries #lightgray: containment
GuideBookWriterCountries --> countries: target

object "<<PropertyValue>>" as countriesName {
    value = "countries"
    property = → simpleName
}
countries *-- countriesName: properties
'simpleName <- countriesName #lightgray: property

object "<<PropertyValue>>" as countriesOptional {
    value = "false"
    property = → optional
}
countries *-- countriesOptional: properties
'optional <- countriesOptional #lightgray: property

object "<<ReferenceTarget>>" as countriesType {
    resolveInfo = "String"
    reference = → propertyType
}
countries *-- countriesType: references
'propertyType <- countriesType #lightgray: reference
countriesType -> String: target

' SpecialistBookWriter

object "<<Node>> SpecialistBookWriter" as SpecialistBookWriter {
    id = "idSpecialistBookWriter"
    concept = → Concept
}
'concept <- SpecialistBookWriter #lightgray: concept

librarySpecialistBookWriter --> SpecialistBookWriter: target

object "<<PropertyValue>>" as SpecialistBookWriterName {
    value = "SpecialistBookWriter"
    property = → simpleName
}
SpecialistBookWriter *-- SpecialistBookWriterName: properties
'simpleName <- SpecialistBookWriterName #lightgray: property

object "<<PropertyValue>>" as SpecialistBookWriterAbstract {
    value = "false"
    property = → abstract
}
SpecialistBookWriter *-- SpecialistBookWriterAbstract: properties
'abstract <- SpecialistBookWriterAbstract #lightgray: property

object "<<ReferenceTarget>>" as SpecialistBookWriterExtends {
    resolveInfo = "Writer"
    reference = → extends
}
SpecialistBookWriter *-- SpecialistBookWriterExtends: references
'extends <- SpecialistBookWriterExtends #lightgray: reference
SpecialistBookWriterExtends -> Writer: target

' SpecialistBookWriter.subject

object "<<Node>> subject" as subject {
    id = "idSpecialistBookWriterSubject"
    concept = → Property
}
'simpleName <- subject #lightgray: property

object "<<ChildTarget>>" as SpecialistBookWriterSubject {
    containment = → features
}
SpecialistBookWriter *-- SpecialistBookWriterSubject: children
'features <- SpecialistBookWriterSubject #lightgray: containment
SpecialistBookWriterSubject --> subject: target

object "<<PropertyValue>>" as subjectName {
    value = "subject"
    property = → simpleName
}
subject *-- subjectName: properties
'simpleName <- subjectName #lightgray: property

object "<<PropertyValue>>" as subjectOptional {
    value = "false"
    property = → optional
}
subject *-- subjectOptional: properties
'optional <- subjectOptional #lightgray: property

object "<<ReferenceTarget>>" as subjectType {
    resolveInfo = "String"
    reference = → propertyType
}
subject *-- subjectType: references
'propertyType <- subjectType #lightgray: reference
subjectType -> String: target

@enduml
