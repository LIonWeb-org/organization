@startuml
title Low-level M2 Library Example

skinparam object {
    BackgroundColor<<Node>> LightGreen
    BackgroundColor<<ReferenceTarget>> LightSkyBlue
}
skinparam map {
    BackgroundColor<<PropertyValue>> LightPink
    BackgroundColor<<ChildTarget>> LightBlue
}

package meta {
    object "Metamodel" as metamodel

    object "qualifiedName" as qualifiedName
    metamodel *-- qualifiedName

    object "elements" as elements
    metamodel *-- elements

    object "Concept" as concept

    object "simpleName" as simpleName
    concept *-- simpleName

    object "abstract" as abstract
    concept *-- abstract

    object "features" as features
    concept *-- features

    object "extends" as extends
    concept *-- extends

    object "PrimitiveType" as primitiveType
    primitiveType *-- simpleName

    object "Property" as property
    property *-- simpleName

    object "optional" as optional
    property *-- optional

    object "propertyType" as propertyType
    property *-- propertyType

    object "Reference" as reference
    reference *-- simpleName
    reference *-- optional

    object "multiple" as multiple
    reference *-- multiple

    object "linkType" as linkType
    reference *-- linkType

    object "Containment" as containment
    containment *-- simpleName
    containment *-- optional
    containment *-- multiple
    containment *-- linkType
}

' library (metamodel)

object "library" as library<<Node>> {
    id = "idLibMm"
    concept = → Metamodel
}
'metamodel <- library #lightgray: concept


map " " as libraryQualifiedName<<PropertyValue>> {
    → qualifiedName => "library"
}
library *-- libraryQualifiedName: properties
'qualifiedName <- libraryQualifiedName #lightgray: property

map " " as libraryChildren<<ChildTarget>> {
    elements => → elements
}
library *-- libraryChildren: children
'elements <- libraryString #lightgray: containment

' String

object "String" as String<<Node>> {
    id = "idString"
    concept = → PrimitiveType
}
'primitiveType <- String #lightgray: concept

libraryChildren::elements --> String: target

map " " as StringName<<PropertyValue>> {
    → simpleName => "String"
}
String *-- StringName: properties
'simpleName <- StringName #lightgray: property

' Boolean

object "Boolean" as Boolean<<Node>> {
    id = "idBoolean"
    concept = → PrimitiveType
}
'primitiveType <- Boolean #lightgray: concept

libraryChildren::elements --> Boolean: target

map " " as BooleanName<<PropertyValue>> {
    → simpleName => "Boolean"
}
Boolean *-- BooleanName: properties
'simpleName <- BooleanName #lightgray: property

' Integer

object "Integer" as Integer<<Node>> {
    id = "idInteger"
    concept = → PrimitiveType
}
'primitiveType <- Integer #lightgray: concept

libraryChildren::elements --> Integer: target

map " " as IntegerName<<PropertyValue>> {
    → simpleName => "Integer"
}
Integer *-- IntegerName: properties
'simpleName <- IntegerName #lightgray: property

' Book

object "Book" as Book<<Node>> {
    id = "idBook"
    concept = → Concept
}
'concept <- Book #lightgray: concept

libraryChildren::elements --> Book: target

map " " as bookName<<PropertyValue>> {
    → simpleName => "Book"
    → abstract => "false"
}
Book *-- bookName: properties

' Book.title

object "title" as title<<Node>> {
    id = "idTitle"
    concept = → Property
}
'property <- title #lightgray: concept

map " " as bookChildren<<ChildTarget>> {
     features => → features
}
Book *-- bookChildren: children
bookChildren::features -> title: target

map " " as titleName<<PropertyValue>> {
    → simpleName => "title"
    → optional => "false"
}
title *-- titleName: properties
'simpleName <- titleName #lightgray: property

object " " as titleType<<ReferenceTarget>> {
    resolveInfo = "String"
    reference = → propertyType
}
title *-- titleType: references
'propertyType <- titleType #lightgray: reference
titleType -> String: target

' Book.pages

object "pages" as pages<<Node>> {
    id = "idPages"
    concept = → Property
}
'property <- pages #lightgray: concept

bookChildren::features --> pages: target

map " " as pagesName<<PropertyValue>> {
    → SimpleName => "pages"
    → optional => "false"
}
pages *-- pagesName: properties
'simpleName <- pagesName #lightgray: property

object " " as pagesType<<ReferenceTarget>> {
    resolveInfo = "Integer"
    reference = → propertyType
}
pages *-- pagesType: references
'propertyType <- pagesType #lightgray: reference
pagesType -> Integer: target

' Book.author

object "author" as author<<Node>> {
    id = "idAuthor"
    concept = → Reference
}
'reference <- author #lightgray: concept

bookChildren::features --> author: target

map " " as authorName<<PropertyValue>> {
    → simpleName => "author"
    → optional => "false"
    → multiple => "false"
}
author *-- authorName: properties
'simpleName <- authorName #lightgray: property


object " " as authorType<<ReferenceTarget>> {
    resolveInfo = "Writer"
    reference = → linkType
}
author *-- authorType: references
'linkType <- authorType #lightgray: reference


' Library (node)

object "Library" as Library<<Node>> {
    id = "idLibrary"
    concept = → Concept
}
'concept <- Library #lightgray: concept

libraryChildren::elements --> Library: target

map " " as libraryName<<PropertyValue>> {
    → simpleName => "Library"
    → abstract => "false"

}
Library *-- libraryName: properties
'simpleName <- libraryName #lightgray: property

' Library.name

object "name" as libraryNameNode<<Node>> {
    id = "idLibraryName"
    concept = → Property
}
'property <- libraryNameNode #lightgray: concept

map " " as LibraryNodeChildren<<ChildTarget>> {
     features => → features
}
Library *-- LibraryNodeChildren: children
LibraryNodeChildren::features -> libraryNameNode: target

map " " as libraryNameName<<PropertyValue>> {
    → simpleName =>  "name"
    → optional => "false"
}
libraryNameNode *-- libraryNameName: properties
'simpleName <- libraryNameName #lightgray: property

object " " as libraryNameNodeType<<ReferenceTarget>> {
    resolveInfo = "String"
    reference = → propertyType
}
libraryNameNode *-- libraryNameNodeType: references
'propertyType <- libraryNameNodeType #lightgray: reference
libraryNameNodeType -> String: target

' Library.books

object "books" as books<<Node>> {
    id = "idLibraryBooks"
    concept = → Containment
}
'containment <- books #lightgray: concept

LibraryNodeChildren::features --> books: target


map " " as booksName<<PropertyValue>> {
    → simpleName => "books"
    → optional => "false"
    → multiple => "true"
}
books *-- booksName: properties
'simpleName <- booksName #lightgray: property

object " " as booksType<<ReferenceTarget>> {
    resolveInfo = "Book"
    reference = → linkType
}
books *-- booksType: references
'linkType <- booksType #lightgray: reference
booksType -> Book: target

' Writer

object "Writer" as Writer<<Node>> {
    id = "idWriter"
    concept = → Concept
}
'concept <- Writer #lightgray: concept


libraryChildren::elements --> Writer: target
authorType -> Writer: target

map " " as Writer_Name<<PropertyValue>> {
    → simpleName => "Writer"
    → abstract => "false"
}
Writer *-- Writer_Name: properties
'simpleName <- Writer_Name #lightgray: property

' Writer.name

object "name" as writerName<<Node>> {
    id = "idWriterName"
    concept = → Property
}
'property <- writerName #lightgray: concept

map " " as WriterChildren<<ChildTarget>> {
     features => → features
}
Writer *-- WriterChildren: children
WriterChildren::features -> writerName: target

map " " as writerNameName<<PropertyValue>> {
    → simpleName => "name"
    → optional => "false"
}
writerName *-- writerNameName: properties
'simpleName <- writerNameName #lightgray: property

object " " as writerNameType<<ReferenceTarget>> {
    resolveInfo = "String"
    reference = → propertyType
}
writerName *-- writerNameType: references
'propertyType <- writerNameType #lightgray: reference
writerNameType -> String: target

' GuideBookWriter

object "GuideBookWriter" as GuideBookWriter<<Node>> {
    id = "idGuideBookWriter"
    concept = → Concept
}
'concept <- GuideBookWriter #lightgray: concept

libraryChildren::elements --> GuideBookWriter: target

map " " as GuideBookWriterName<<PropertyValue>> {
    → simpleName => "GuideBookWriter"
    → abstract => "false"
}
GuideBookWriter *-- GuideBookWriterName: properties
'simpleName <- GuideBookWriterName #lightgray: property

object " " as GuideBookWriterExtends<<ReferenceTarget>> {
    resolveInfo = "Writer"
    reference = → extends
}
GuideBookWriter *-- GuideBookWriterExtends: references
'extends <- GuideBookWriterExtends #lightgray: reference
GuideBookWriterExtends -> Writer: target

' GuideBookWriter.countries

object "countries" as countries<<Node>> {
    id = "idGuideBookWriterCountries"
    concept = → Property
}
'simpleName <- countries #lightgray: property

map " " as GuideBookWriterChildren<<ChildTarget>> {
     features => → features
}
GuideBookWriter *-- GuideBookWriterChildren: children
GuideBookWriterChildren::features -> countries: target

map " " as countriesName<<PropertyValue>> {
    → simpleName => "countries"
    → optional => "false"
}
countries *-- countriesName: properties
'simpleName <- countriesName #lightgray: property

object " " as countriesType<<ReferenceTarget>> {
    resolveInfo = "String"
    reference = → propertyType
}
countries *-- countriesType: references
'propertyType <- countriesType #lightgray: reference
countriesType -> String: target

' SpecialistBookWriter

object "SpecialistBookWriter" as SpecialistBookWriter<<Node>> {
    id = "idSpecialistBookWriter"
    concept = → Concept
}
'concept <- SpecialistBookWriter #lightgray: concept

libraryChildren::elements --> SpecialistBookWriter: target

map " " as SpecialistBookWriterName<<PropertyValue>> {
    → simpleName => "SpecialistBookWriter"
    → abstract => "false"
}
SpecialistBookWriter *-- SpecialistBookWriterName: properties
'simpleName <- SpecialistBookWriterName #lightgray: property

object " " as SpecialistBookWriterExtends<<ReferenceTarget>> {
    resolveInfo = "Writer"
    reference = → extends
}
SpecialistBookWriter *-- SpecialistBookWriterExtends: references
'extends <- SpecialistBookWriterExtends #lightgray: reference
SpecialistBookWriterExtends -> Writer: target

' SpecialistBookWriter.subject

object "subject" as subject<<Node>> {
    id = "idSpecialistBookWriterSubject"
    concept = → Property
}
'simpleName <- subject #lightgray: property

map " " as SpecialistBookWriterChildren<<ChildTarget>> {
     features => → features
}
SpecialistBookWriter *-- SpecialistBookWriterChildren: children
SpecialistBookWriterChildren::features -> subject: target

map " " as subjectName<<PropertyValue>> {
    → simpleName => "subject"
    → optional => "false"
}
subject *-- subjectName: properties
'simpleName <- subjectName #lightgray: property

object " " as subjectType<<ReferenceTarget>> {
    resolveInfo = "String"
    reference = → propertyType
}
subject *-- subjectType: references
'propertyType <- subjectType #lightgray: reference
subjectType -> String: target

@enduml
