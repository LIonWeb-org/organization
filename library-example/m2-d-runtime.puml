@startuml
title Runtime M2 Library Example

hide empty members
hide stereotypes

!include ../shared/runtime-skinparam.puml

package "M3 descriptors" {
    class MetamodelDescriptor
    class PrimitiveTypeDescriptor
    class ConceptDescriptor
    class PropertyDescriptor
    class ContainmentDescriptor
    class ReferenceDescriptor
    
}

object "library : <u>MetamodelDescriptor</u>" as library<<Metamodel>> {
    qualifiedName = "library"
}

object "LibBoolean : <u>PrimitiveTypeDescriptor</u>" as LibBoolean<<PrimitiveType>> {
    simpleName = "LibBoolean"
}
library *-- LibBoolean: elements

object "LibString : <u>PrimitiveTypeDescriptor</u>" as LibString<<PrimitiveType>> {
    simpleName = "LibString"
}
library *-- LibString: elements

object "LibInteger : <u>PrimitiveTypeDescriptor</u>" as LibInteger<<PrimitiveType>> {
    simpleName = "LibInteger"
}
library *-- LibInteger: elements

object "Library : <u>ConceptDescriptor</u>" as Library<<Concept>> {
    simpleName = "Library"
    abstract = false
}
library *-- Library: elements

object "LibraryName : <u>PropertyDescriptor</u>" as LibraryName<<Property>> {
    simpleName = "name"
    optional = false
}
library *-- LibraryName: features
LibraryName -> LibString: type

object "LibraryBooks : <u>ContainmentDescriptor</u>" as LibraryBooks<<Containment>> {
    simpleName = "books"
    optional = false
    multiple = true
}
Library *-- LibraryBooks: features

object "Book : <u>ConceptDescriptor</u>" as Book<<Concept>> {
    simpleName = "Book"
    abstract = false
}
library *-- Book: elements

LibraryBooks -> Book: type

object "BookTitle : <u>PropertyDescriptor</u>" as BookTitle<<Property>> {
    simpleName = "title"
    optional = false
}
Book *-- BookTitle: features
BookTitle -> LibString: type

object "BookPages : <u>PropertyDescriptor</u>" as BookPages<<Property>> {
    simpleName = "pages"
    optional = false
}
Book *-- BookPages: features
BookPages -> LibInteger: type

object "BookAuthor : <u>ReferenceDescriptor</u>" as BookAuthor<<Reference>> {
    simpleName = "author"
    optional = false
    multiple = true
}
Book *-- BookAuthor: features

object "Writer : <u>ConceptDescriptor</u>" as Writer<<Concept>> {
    simpleName = "Writer"
    abstract = false
}
library *-- Writer: elements

BookAuthor -> Writer: type

object "WriterName : <u>PropertyDescriptor</u>" as WriterName<<Property>> {
    simpleName = "name"
    optional = false
}
Writer *-- WriterName: features
WriterName -> LibString: type

object "SpecialistBookWriter : <u>ConceptDescriptor</u>" as SpecialistBookWriter<<Concept>> {
    simpleName = "SpecialistBookWriter"
    abstract = false
}
library *-- SpecialistBookWriter: elements

object "SpecialistBookWriterSubject : <u>PropertyDescriptor</u>" as SpecialistBookWriterSubject<<Property>> {
    simpleName = "subject"
    optional = false
}
SpecialistBookWriter *-- SpecialistBookWriterSubject: features
SpecialistBookWriterSubject -> LibString: type

object "GuideBookWriter : <u>ConceptDescriptor</u>" as GuideBookWriter<<Concept>> {
    simpleName = "GuideBookWriter"
    abstract = false
}
library *-- GuideBookWriter: elements

object "GuideBookWriterCountries : <u>PropertyDescriptor</u>" as GuideBookWriterCountries<<Property>> {
    simpleName = "countries"
    optional = false
}
GuideBookWriter *-- GuideBookWriterCountries: features
GuideBookWriterCountries -> LibString: type


@enduml
